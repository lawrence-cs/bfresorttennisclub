{"version":3,"sources":["img/featured-image.jpeg","logo.svg","components/navigationbar.component.js","components/home.component.js","components/about.component.js","components/membership.component.js","components/contact.component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","company_data","information","Navigationbar","Navbar","bg","expand","variant","Brand","company_short_name","Toggle","aria-controls","Collapse","id","Nav","className","to","Component","Home","src","featured_image","About","Membership","Contact","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kOAAAA,EAAOC,QAAU,IAA0B,6C,4ECA3CD,EAAOC,QAAU,IAA0B,kC,2LCKrCC,E,MAAoBC,YAELC,E,iLAGjB,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,UAAUC,OAAO,KAAKC,QAAQ,QACvC,kBAACH,EAAA,EAAOI,MAAR,KAAeP,EAAaQ,oBAC5B,kBAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,qBAC7B,kBAACP,EAAA,EAAOQ,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,wBAAIA,UAAU,eACZ,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,YAAvB,SAEF,wBAAIA,UAAU,eACZ,kBAAC,IAAD,CAAMC,GAAG,SAASD,UAAU,YAA5B,UAEF,wBAAIA,UAAU,eACZ,kBAAC,IAAD,CAAMC,GAAG,cAAcD,UAAU,YAAjC,eAEF,wBAAIA,UAAU,eACZ,kBAAC,IAAD,CAAMC,GAAG,WAAWD,UAAU,YAA9B,mB,GAnB6BE,a,iBCFtBC,E,iLAEjB,OACE,6BACC,yBAAKC,IAAKC,W,GAJiBH,aCHbI,E,iLAEjB,OACE,wC,GAH6BJ,aCAdK,E,iLAEjB,OACE,6C,GAHkCL,aCAnBM,E,iLAEjB,OACE,0C,GAH+BN,aCwBtBO,MAbf,WACE,OACE,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,6BACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWT,IACjC,kBAAC,IAAD,CAAOO,KAAK,SAASE,UAAWN,IAChC,kBAAC,IAAD,CAAOI,KAAK,cAAcE,UAAWL,IACrC,kBAAC,IAAD,CAAOG,KAAK,WAAWE,UAAWJ,M,MCTtBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACR,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1f7dcc67.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/featured-image.bcd55bbd.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { Navbar, NavItem, NavDropdown, MenuItem, Nav } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport data from \"./data\"; \n\nconst company_data = data.information;\n\nexport default class Navigationbar extends Component {\n\n  render() {\n    return (\n      <Navbar bg=\"success\" expand=\"lg\" variant=\"dark\">\n        <Navbar.Brand>{company_data.company_short_name}</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <li className=\"navbar-item\">\n              <Link to=\"/\" className=\"nav-link\">Home</Link>\n            </li>\n            <li className=\"navbar-item\">\n              <Link to=\"/about\" className=\"nav-link\">About</Link>\n            </li>\n            <li className=\"navbar-item\">\n              <Link to=\"/membership\" className=\"nav-link\">Membership</Link>\n            </li>\n            <li className=\"navbar-item\">\n              <Link to=\"/contact\" className=\"nav-link\">Contact</Link>\n            </li>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  }\n}","import React, { Component } from 'react';\nimport data from \"./data\";\nimport featured_image from '../img/featured-image.jpeg';\n\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div>\n      \t<img src={featured_image} />\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\n\nexport default class About extends Component {\n  render() {\n    return (\n      <p>about</p>\n    )\n  }\n}","import React, { Component } from 'react';\n\nexport default class Membership extends Component {\n  render() {\n    return (\n      <p>Membership</p>\n    )\n  }\n}","import React, { Component } from 'react';\n\nexport default class Contact extends Component {\n  render() {\n    return (\n      <p>Contact</p>\n    )\n  }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\n\nimport Navigationbar from \"./components/navigationbar.component\";\nimport Home from \"./components/home.component\";\nimport About from \"./components/about.component\";\nimport Membership from \"./components/membership.component\";\nimport Contact from \"./components/contact.component\";\n\n\n\nfunction App() {\n  return (\n    <Router>\n        <Navigationbar />\n        <br/>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/membership\" component={Membership} />\n        <Route path=\"/contact\" component={Contact} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<App />, \n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}